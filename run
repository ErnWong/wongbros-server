#!/usr/bin/env node

const util = require('util');
const path = require('path');
const fs = require('fs');
const http = require('http');
const request = require('request');
const requestPromise = require('request-promise-native');
const crypto = require('crypto');
const readline = require('readline');
const sanitizeFilename = require('sanitize-filename');
const moment = require('moment');

const {spawn} = require('child_process');
const extractZip = util.promisify(require('extract-zip'));
const extractTar = require('tar').x;
const rimraf = util.promisify(require('rimraf'));
const readdir = util.promisify(fs.readdir);
const readFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);
const unlink = util.promisify(fs.unlink);
const mkdir = util.promisify(fs.mkdir);

const IS_LINUX = !process.argv.includes('windows');
const RUN = !process.argv.includes('update');
const BIN_DIR = path.resolve('bin');
const USER_DATA_PATH = path.resolve('data');
const SAVE_DIR = path.resolve(USER_DATA_PATH,'save/wongbros');
const EXE_FILE = path.resolve(BIN_DIR,
  IS_LINUX ?
  'OpenRCT2/openrct2-cli':
  'openrct2.exe');
const VERSION_FILE = path.resolve('current-version.txt');
const ARCHIVE_FILE = path.resolve(IS_LINUX ? 'latest.tar.gz' : 'latest.zip');

const extract = IS_LINUX ?
  async function (archivePath, {dir}) {
    await mkdir(dir);
    await extractTar({
      cwd: dir,
      file: archivePath
    });
  } :
  extractZip;
const OPENRCT2_FLAVOUR = IS_LINUX ? '9' : '6';
const API_GET_LATEST_DOWNLOAD = {
  uri: 'https://openrct2.org/altapi/',
  qs: {
    command: 'get-latest-download',
    flavourId: OPENRCT2_FLAVOUR,
    gitBranch: 'develop'
  },
  json: true
};

async function startServer() {
  await ensureUpdate();

  if (!RUN) return;

  console.log("Finding latest game save");
  const files = await readdir(SAVE_DIR);
  const saveFile = path.resolve(SAVE_DIR, files.sort().pop());
  console.log(`File: ${saveFile}`);

  console.log("Good to go. Firing up the server...");
  console.log("--------------------------------------------------------------------------------");
  const serverProcess = spawn(EXE_FILE, [
    'host', saveFile,
    '--port', '11753',
    '--user-data-path', USER_DATA_PATH,
    '--headless'
  ], {
    //detached: true
    stdio: [
      'ignore',
      process.stdout,
      process.stderr
    ]
  });
  // serverProcess.unref();
  // process.exit(0);

  serverProcess.on('close', (code) => {
    console.log(`Exit code: ${code}`);
    quit();
  });

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    prompt: ''
  });

  rl.prompt();

  rl.on('line', async (line) => {
    line = line.trim().toLowerCase().split(/\s+/);
    switch (line[0]) {
      case '':
        break;
      case 'help':
        console.log('Supported commands:');
        console.log('    help           - Displays what you\'re seeing right now.');
        console.log('    quit           - Stops the server, discarding changes.');
        console.log('    check-port     - Verifies server visibility.');
        // console.log('    save [comment] - Saves current game with optional comment');
        // console.log('                     as a way to remember the save file');
        // console.log('    restart        - Discards current changes and restarts');
        // console.log('                     server.');
        break;
      case 'quit':
        quit();
        break;
      case 'check-port':
        let good = true;

        let result = await requestPromise({
          method: 'POST',
          uri: 'http://www.portchecktool.com/',
          form: {
            submit: 'Check your port',
            port: '11753'
          }
        });

        if(typeof result !== 'string') result = '';

        result = result.toLowerCase();
        if (result.includes('success')) {
          console.log('Service can be seen through public IP');
        }
        else if (result.includes('problem')) {
          console.log('Service cannot be seen through public IP');
          good = false;
        }
        else {
          console.log('Port status unknown');
          good = false;
        }
        result = await requestPromise({
          method: 'POST',
          uri: 'https://www.traccar.org/port-check/',
          form: {
            address: 'wongbros.hopto.org',
            port: 11753
          }
        });

        if(typeof result !== 'string') result = '';

        result = result.toLowerCase();

        if (result.includes('open')) {
          console.log('Service can be seen through wongbros.hopto.org');
        }
        else if (result.includes('closed')) {
          console.log('Service cannot be seen through wongbros.hopto.org');
          good = false;
        }
        else {
          console.log('Port status unknown');
          good = false;
        }

        console.log('Done checking port:');
        if (good) {
          console.log('Everything looks good');
        }
        else {
          console.log('Something might be wrong');
        }
        break;
        /*
      case 'save':
        line[0] = '';
        const saveComment = sanitizeFilename(line.join('-'));
        const timestamp = moment.utc().format('YYYY-MM-DDTHHmmss[Z]');
        const filename = `Save-${timestamp}${saveComment}.SV6`;
        console.log(`Unimplemented: save to ${filename}`);
        break;
        */
      default:
        console.log(`Unrecognized command: ${line[0]}`);
        console.log('Enter \'help\' for a list of commands');
        break;
    }
    rl.prompt();
  });

  rl.on('close', quit);

  function quit() {
    serverProcess.kill();
    console.log('Good bye');
    process.exit(0);
  }
}

async function ensureUpdate() {
  try {

    console.log('Checking for latest version');
    const latestInfo = await requestPromise(API_GET_LATEST_DOWNLOAD);
    const latestDownloadId = latestInfo.downloadId.toString();

    let currentDownloadId = '';
    let currentFlavour = '';
    try {
      console.log('Checking current version');
      [currentDownloadId, currentFlavour] = (await readFile(VERSION_FILE, 'utf8')).split('\n');
    } catch (err) {
      console.error('Error loading current version number:');
      console.error(err);
      console.error('Going ahead with update');
    }

    if (currentDownloadId === latestDownloadId && currentFlavour == OPENRCT2_FLAVOUR) {
      console.log('Current version is up to date');
      return;
    }

    console.log('Newer version available. Downloading');
    await downloadOpenRCT2(latestInfo);

    console.log('Extracting download');
    await rimraf(BIN_DIR);
    await extract(ARCHIVE_FILE, {dir: BIN_DIR});
    await unlink(ARCHIVE_FILE);

    console.log('Updating current version number');
    await writeFile(VERSION_FILE, [latestDownloadId, OPENRCT2_FLAVOUR].join('\n'));

  } catch (err) {
    console.error('Error during update attempt:');
    console.error(err);
  }
}

function downloadOpenRCT2(info) {
  return new Promise((resolve, reject) => {
    http.get(info.url, (res) => {

      const writeStream = fs.createWriteStream(ARCHIVE_FILE);
      const hash = crypto.createHash('sha256');

      res.on('data', (chunk) => {
        writeStream.write(chunk);
        hash.update(chunk);
      });

      res.on('end', () => {
        if (hash.digest('hex') !== info.fileHash) {
          reject(new Error(
            'Invalid download: hash do not agree.\nExpect: ' +
            info.fileHash +
            '\nActual: ' +
            hash.digest('hex'))
          );
        }
        else resolve();
      });

    }).on('error', (err) => {
      reject(new Error(err));
    });
  });
}

startServer();
